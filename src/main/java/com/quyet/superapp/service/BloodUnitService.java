package com.quyet.superapp.service;

<<<<<<< HEAD
import com.quyet.superapp.entity.BloodBag;
import com.quyet.superapp.entity.BloodComponent;
import com.quyet.superapp.entity.BloodType;
import com.quyet.superapp.entity.BloodUnit;
import com.quyet.superapp.enums.BloodUnitStatus;
import com.quyet.superapp.repository.BloodBagRepository;
import com.quyet.superapp.repository.BloodComponentRepository;
import com.quyet.superapp.repository.BloodTypeRepository;
import com.quyet.superapp.repository.BloodUnitRepository;
=======
import com.quyet.superapp.entity.*;
import com.quyet.superapp.enums.BloodUnitStatus;
import com.quyet.superapp.exception.ResourceNotFoundException;
import com.quyet.superapp.repository.*;
>>>>>>> origin/main
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;
<<<<<<< HEAD
import java.util.Optional;
=======
>>>>>>> origin/main

@Service
@RequiredArgsConstructor
public class BloodUnitService {
<<<<<<< HEAD
    private final BloodUnitRepository repository;
    private final BloodBagRepository bloodBagRepository;
    private final BloodTypeRepository bloodTypeRepository;
    private final BloodComponentRepository bloodComponentRepository;

    // ‚úÖ L·∫•y t·∫•t c·∫£ ƒë∆°n v·ªã m√°u
    public List<BloodUnit> getAll() {
        return repository.findAll();
    }

    // ‚úÖ L·∫•y ƒë∆°n v·ªã m√°u theo ID
    public BloodUnit getById(Long id) {
        return repository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Blood unit not found with id: " + id));
    }

    // ‚úÖ L∆∞u m·ªõi ho·∫∑c c·∫≠p nh·∫≠t ƒë∆°n v·ªã m√°u
    public BloodUnit save(BloodUnit unit, Long bloodTypeId, Long componentId, Long bloodBagId) {
        BloodType bloodType = bloodTypeRepository.findById(bloodTypeId)
                .orElseThrow(() -> new IllegalArgumentException("Blood type not found"));
        BloodComponent component = bloodComponentRepository.findById(componentId)
                .orElseThrow(() -> new IllegalArgumentException("Component not found"));
        BloodBag bag = bloodBagRepository.findById(bloodBagId)
                .orElseThrow(() -> new IllegalArgumentException("Blood bag not found"));

        unit.setBloodType(bloodType);
        unit.setComponent(component);
        unit.setBloodBag(bag);

        return repository.save(unit);
    }

    // ‚úÖ X√≥a ƒë∆°n v·ªã m√°u
    public void deleteById(Long id) {
        if (!repository.existsById(id)) {
            throw new IllegalArgumentException("Blood unit does not exist with id: " + id);
        }
        repository.deleteById(id);
    }
    // ‚úÖ T√¨m ƒë∆°n v·ªã m√°u theo tr·∫°ng th√°i
    public List<BloodUnit> findByStatus(BloodUnitStatus status) {
        return repository.findByStatus(status);
    }

    // ‚úÖ T√¨m ƒë∆°n v·ªã m√°u s·∫Øp h·∫øt h·∫°n
    public List<BloodUnit> findExpiringBefore(LocalDate date) {
        return repository.findByExpirationDateBefore(date);
    }

    // ‚úÖ T√¨m theo m√£ ƒë∆°n v·ªã
    public BloodUnit findByUnitCode(String code) {
        return repository.findByUnitCode(code)
                .orElseThrow(() -> new IllegalArgumentException("No blood unit found with code: " + code));
    }

=======

    private final BloodUnitRepository bloodUnitRepo;
    private final BloodTypeRepository bloodTypeRepo;
    private final BloodComponentRepository componentRepo;
    private final BloodBagRepository bagRepo;

    // üîç L·∫•y to√†n b·ªô ƒë∆°n v·ªã m√°u
    public List<BloodUnit> getAllUnits() {
        return bloodUnitRepo.findAll();
    }

    // üîç L·∫•y theo ID
    public BloodUnit getById(Long id) {
        return bloodUnitRepo.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã m√°u v·ªõi ID: " + id));
    }

    // üîç L·∫•y theo m√£ code (ƒë·ªÉ tra c·ª©u)
    public BloodUnit getByUnitCode(String code) {
        return bloodUnitRepo.findByUnitCode(code)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã m√°u v·ªõi m√£: " + code));
    }

    // üóÉÔ∏è L∆∞u ƒë∆°n v·ªã m√°u ‚Äì g√°n c√°c entity li√™n k·∫øt theo ID
    public BloodUnit saveUnit(BloodUnit unit, Long bloodTypeId, Long componentId, Long bloodBagId) {
        BloodType bloodType = bloodTypeRepo.findById(bloodTypeId)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y nh√≥m m√°u v·ªõi ID: " + bloodTypeId));

        BloodComponent component = componentRepo.findById(componentId)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y th√†nh ph·∫ßn m√°u v·ªõi ID: " + componentId));

        BloodBag bloodBag = bagRepo.findById(bloodBagId)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y t√∫i m√°u v·ªõi ID: " + bloodBagId));

        unit.setBloodType(bloodType);
        unit.setComponent(component);
        unit.setBloodBag(bloodBag);

        return bloodUnitRepo.save(unit);
    }

    // ‚ùå X√≥a theo ID
    public void deleteById(Long id) {
        if (!bloodUnitRepo.existsById(id)) {
            throw new ResourceNotFoundException("Kh√¥ng t·ªìn t·∫°i ƒë∆°n v·ªã m√°u v·ªõi ID: " + id);
        }
        bloodUnitRepo.deleteById(id);
    }

    // üîç T√¨m ƒë∆°n v·ªã m√°u theo tr·∫°ng th√°i
    public List<BloodUnit> findByStatus(BloodUnitStatus status) {
        return bloodUnitRepo.findByStatus(status);
    }

    // üîç T√¨m c√°c ƒë∆°n v·ªã m√°u s·∫Øp h·∫øt h·∫°n
    public List<BloodUnit> findExpiringBefore(LocalDate date) {
        return bloodUnitRepo.findByExpirationDateBefore(date);
    }
>>>>>>> origin/main
}
