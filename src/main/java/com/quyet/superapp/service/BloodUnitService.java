package com.quyet.superapp.service;

import com.quyet.superapp.entity.*;
import com.quyet.superapp.enums.BloodUnitStatus;
import com.quyet.superapp.exception.ResourceNotFoundException;
import com.quyet.superapp.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;

@Service
@RequiredArgsConstructor
public class BloodUnitService {

    private final BloodUnitRepository bloodUnitRepo;
    private final BloodTypeRepository bloodTypeRepo;
    private final BloodComponentRepository componentRepo;
    private final BloodBagRepository bagRepo;

    // üîç L·∫•y to√†n b·ªô ƒë∆°n v·ªã m√°u
    public List<BloodUnit> getAllUnits() {
        return bloodUnitRepo.findAll();
    }

    // üîç L·∫•y theo ID
    public BloodUnit getById(Long id) {
        return bloodUnitRepo.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã m√°u v·ªõi ID: " + id));
    }

    // üîç L·∫•y theo m√£ code (ƒë·ªÉ tra c·ª©u)
    public BloodUnit getByUnitCode(String code) {
        return bloodUnitRepo.findByUnitCode(code)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã m√°u v·ªõi m√£: " + code));
    }

    // üóÉÔ∏è L∆∞u ƒë∆°n v·ªã m√°u ‚Äì g√°n c√°c entity li√™n k·∫øt theo ID
    public BloodUnit saveUnit(BloodUnit unit, Long bloodTypeId, Long componentId, Long bloodBagId) {
        BloodType bloodType = bloodTypeRepo.findById(bloodTypeId)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y nh√≥m m√°u v·ªõi ID: " + bloodTypeId));

        BloodComponent component = componentRepo.findById(componentId)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y th√†nh ph·∫ßn m√°u v·ªõi ID: " + componentId));

        BloodBag bloodBag = bagRepo.findById(bloodBagId)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y t√∫i m√°u v·ªõi ID: " + bloodBagId));

        unit.setBloodType(bloodType);
        unit.setComponent(component);
        unit.setBloodBag(bloodBag);

        return bloodUnitRepo.save(unit);
    }

    // ‚ùå X√≥a theo ID
    public void deleteById(Long id) {
        if (!bloodUnitRepo.existsById(id)) {
            throw new ResourceNotFoundException("Kh√¥ng t·ªìn t·∫°i ƒë∆°n v·ªã m√°u v·ªõi ID: " + id);
        }
        bloodUnitRepo.deleteById(id);
    }

    // üîç T√¨m ƒë∆°n v·ªã m√°u theo tr·∫°ng th√°i
    public List<BloodUnit> findByStatus(BloodUnitStatus status) {
        return bloodUnitRepo.findByStatus(status);
    }

    // üîç T√¨m c√°c ƒë∆°n v·ªã m√°u s·∫Øp h·∫øt h·∫°n
    public List<BloodUnit> findExpiringBefore(LocalDate date) {
        return bloodUnitRepo.findByExpirationDateBefore(date);
    }
}
