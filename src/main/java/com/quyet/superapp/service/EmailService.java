package com.quyet.superapp.service;

import com.quyet.superapp.entity.EmailLog;
import com.quyet.superapp.entity.User;

import com.quyet.superapp.enums.BloodComponentType;
import com.quyet.superapp.repository.EmailLogRepository;

import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;




@Service
@RequiredArgsConstructor
@Slf4j
public class EmailService {

    private final JavaMailSender mailSender;
    private final EmailLogRepository emailLogRepository;


    /**
     * ‚úÖ G·ª≠i email b·∫•t k·ª≥ v√† l∆∞u log
     */
    public void sendEmail(User user, String subject, String content, String type) {
        EmailLog emailLog = new EmailLog();
        emailLog.setUser(user);
        emailLog.setRecipientEmail(user.getEmail());
        emailLog.setSubject(subject);
        emailLog.setBody(content);
        emailLog.setType(type);
        emailLog.setSentAt(LocalDateTime.now());

        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, "utf-8");
            helper.setTo(user.getEmail());
            helper.setSubject(subject);
            helper.setText(content, true); // HTML enabled
            mailSender.send(message);

            emailLog.setStatus("SUCCESS");
            log.info("üìß Email g·ª≠i th√†nh c√¥ng ƒë·∫øn: {}", user.getEmail());
        } catch (Exception e) {
            emailLog.setStatus("FAILED");
            log.error("‚ùå G·ª≠i email th·∫•t b·∫°i ƒë·∫øn {}: {}", user.getEmail(), e.getMessage(), e);
        }

        emailLogRepository.save(emailLog);
    }
    public void sendRecoveryReminder(User user, BloodComponentType component, LocalDate nextEligibleDate) {
        String componentName = switch (component) {
            case PLASMA -> "Huy·∫øt t∆∞∆°ng (Plasma)";
            case RBC -> "H·ªìng c·∫ßu (RBC)";
            case PLATELET -> "Ti·ªÉu c·∫ßu (Platelet)";
            case WBC -> "B·∫°ch c·∫ßu (WBC)";

        };

        String content = "<p>Xin ch√†o <b>" + user.getUsername() + "</b>,</p>" +
                "<p>B·∫°n ƒë√£ t·ª´ng hi·∫øn " + componentName + " c√°ch ƒë√¢y m·ªôt th·ªùi gian.</p>" +
                "<p>H·ªá th·ªëng xin th√¥ng b√°o r·∫±ng b·∫°n s·∫Ω ƒë·ªß ƒëi·ªÅu ki·ªán hi·∫øn l·∫°i v√†o ng√†y: <b>"
                + nextEligibleDate.toString() + "</b>.</p>" +
                "<p>H√£y ƒë·∫£m b·∫£o s·ª©c kh·ªèe v√† quay l·∫°i tham gia hi·∫øn m√°u nh√©! ‚ù§Ô∏è</p>" +
                "<br><p>Tr√¢n tr·ªçng,</p><p>H·ªá th·ªëng h·ªó tr·ª£ hi·∫øn m√°u</p>";

        sendEmail(user, "Nh·∫Øc nh·ªü ph·ª•c h·ªìi hi·∫øn m√°u", content, "REMINDER");
    }

    /**
     * ‚úÖ G·ª≠i email ch·ª©a OTP ƒëƒÉng k√Ω
     */
    public void sendRegisterOtp(User user, String otp) {
        String content = "<p>Xin ch√†o <b>" + user.getUsername() + "</b>,</p>" +
                "<p>M√£ OTP x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n l√†: <b style='font-size: 18px;'>" + otp + "</b></p>" +
                "<p>Vui l√≤ng nh·∫≠p m√£ n√†y trong v√≤ng <b>5 ph√∫t</b> ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω.</p>" +
                "<br><p>Tr√¢n tr·ªçng,</p><p>H·ªá th·ªëng h·ªó tr·ª£ hi·∫øn m√°u</p>";

        sendEmail(user, "M√£ x√°c th·ª±c OTP ƒëƒÉng k√Ω t√†i kho·∫£n", content, "OTP_REGISTER");
    }


}
