package com.quyet.superapp.service;

import com.quyet.superapp.dto.CreateLabTestRequest;
import com.quyet.superapp.dto.LabTestResultDTO;
import com.quyet.superapp.entity.BloodUnit;
import com.quyet.superapp.entity.LabTestResult;
import com.quyet.superapp.entity.User;
import com.quyet.superapp.mapper.LabTestResultMapper;
import com.quyet.superapp.repository.BloodUnitRepository;
import com.quyet.superapp.repository.LabTestResultRepository;
import com.quyet.superapp.repository.UserRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class LabTestService {

<<<<<<< HEAD
    private final LabTestResultRepository labTestResultRepository;
    private final BloodUnitRepository bloodUnitRepository;
    private final UserRepository userRepository;
    /**
     * T·∫°o k·∫øt qu·∫£ x√©t nghi·ªám cho m·ªôt ƒë∆°n v·ªã m√°u
     */
    @Transactional
    public LabTestResultDTO createLabTestResult(CreateLabTestRequest request) {
        // 1. Ki·ªÉm tra ƒë∆°n v·ªã m√°u c√≥ t·ªìn t·∫°i kh√¥ng
        BloodUnit unit = bloodUnitRepository.findById(request.getBloodUnitId())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã m√°u."));

        // 2. Ki·ªÉm tra ƒë√£ c√≥ k·∫øt qu·∫£ ch∆∞a
        if (labTestResultRepository.existsByBloodUnit_BloodUnitId(unit.getBloodUnitId())) {
            throw new IllegalStateException("ƒê∆°n v·ªã m√°u ƒë√£ ƒë∆∞·ª£c x√©t nghi·ªám.");
        }

        // 3. Ki·ªÉm tra ng∆∞·ªùi x√©t nghi·ªám
        User tester = userRepository.findById(request.getTestedById())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n x√©t nghi·ªám."));

        // 4. T·∫°o k·∫øt qu·∫£ x√©t nghi·ªám
        LabTestResult result = new LabTestResult();
        result.setBloodUnit(unit);
        result.setHivNegative(request.isHivNegative());
        result.setHbvNegative(request.isHbvNegative());
        result.setHcvNegative(request.isHcvNegative());
        result.setSyphilisNegative(request.isSyphilisNegative());
        result.setMalariaNegative(request.isMalariaNegative());

        // 5. ƒê√°nh gi√° t·ªïng h·ª£p
        boolean passed = request.isHivNegative() &&
                request.isHbvNegative() &&
                request.isHcvNegative() &&
                request.isSyphilisNegative() &&
                request.isMalariaNegative();
        result.setPassed(passed);
        result.setTestedAt(LocalDateTime.now());
        result.setTestedBy(tester);

        // 6. L∆∞u v√†o DB
        LabTestResult saved = labTestResultRepository.save(result);

        return LabTestResultMapper.toDTO(saved);
    }
    /**
     * Truy xu·∫•t k·∫øt qu·∫£ theo ƒë∆°n v·ªã m√°u
     */
    public Optional<LabTestResultDTO> getByBloodUnit(Long bloodUnitId) {
        return labTestResultRepository.findByBloodUnit_BloodUnitId(bloodUnitId)
                .map(LabTestResultMapper::toDTO);
    }
    /**
     * Ki·ªÉm tra xem ƒë∆°n v·ªã m√°u ƒë√£ ƒë∆∞·ª£c x√©t nghi·ªám ch∆∞a
     */
    public boolean isTested(Long bloodUnitId) {
        return labTestResultRepository.existsByBloodUnit_BloodUnitId(bloodUnitId);
    }

    public List<LabTestResultDTO> getAllResults() {
        return labTestResultRepository.findAll().stream()
=======
    private final LabTestResultRepository labTestRepo;
    private final BloodUnitRepository unitRepo;
    private final UserRepository userRepo;

    /**
     * ‚úÖ T·∫°o k·∫øt qu·∫£ x√©t nghi·ªám cho ƒë∆°n v·ªã m√°u
     */
    @Transactional
    public LabTestResultDTO createLabTestResult(CreateLabTestRequest request) {
        BloodUnit unit = getValidBloodUnit(request.getBloodUnitId());
        validateUnitNotTested(unit.getBloodUnitId());
        User tester = getValidUser(request.getTestedById());

        LabTestResult result = buildLabTestResult(unit, tester, request);
        LabTestResult saved = labTestRepo.save(result);

        return LabTestResultMapper.toDTO(saved);
    }

    /**
     * ‚úÖ Truy xu·∫•t k·∫øt qu·∫£ x√©t nghi·ªám theo ID ƒë∆°n v·ªã m√°u
     */
    public Optional<LabTestResultDTO> getByBloodUnit(Long bloodUnitId) {
        return labTestRepo.findByBloodUnit_BloodUnitId(bloodUnitId)
                .map(LabTestResultMapper::toDTO);
    }

    /**
     * ‚úÖ Ki·ªÉm tra ƒë∆°n v·ªã m√°u ƒë√£ ƒë∆∞·ª£c x√©t nghi·ªám ch∆∞a
     */
    public boolean isTested(Long bloodUnitId) {
        return labTestRepo.existsByBloodUnit_BloodUnitId(bloodUnitId);
    }

    /**
     * ‚úÖ L·∫•y to√†n b·ªô k·∫øt qu·∫£
     */
    public List<LabTestResultDTO> getAllResults() {
        return labTestRepo.findAll().stream()
>>>>>>> origin/main
                .map(LabTestResultMapper::toDTO)
                .toList();
    }

<<<<<<< HEAD
    @Transactional
    public void deleteResult(Long id) {
        labTestResultRepository.deleteById(id);
=======
    /**
     * ‚úÖ Xo√° k·∫øt qu·∫£ x√©t nghi·ªám theo ID
     */
    @Transactional
    public void deleteResult(Long id) {
        labTestRepo.deleteById(id);
    }

    // üîç ƒê·∫£m b·∫£o ƒë∆°n v·ªã m√°u t·ªìn t·∫°i
    private BloodUnit getValidBloodUnit(Long unitId) {
        return unitRepo.findById(unitId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã m√°u."));
    }

    // üîç ƒê·∫£m b·∫£o user t·ªìn t·∫°i
    private User getValidUser(Long userId) {
        return userRepo.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n x√©t nghi·ªám."));
    }

    // ‚ùå N·∫øu ƒë√£ x√©t nghi·ªám th√¨ throw l·ªói
    private void validateUnitNotTested(Long unitId) {
        if (labTestRepo.existsByBloodUnit_BloodUnitId(unitId)) {
            throw new IllegalStateException("ƒê∆°n v·ªã m√°u ƒë√£ ƒë∆∞·ª£c x√©t nghi·ªám.");
        }
    }

    // üß™ T·∫°o entity LabTestResult t·ª´ request
    private LabTestResult buildLabTestResult(BloodUnit unit, User tester, CreateLabTestRequest req) {
        LabTestResult result = new LabTestResult();
        result.setBloodUnit(unit);
        result.setTestedBy(tester);
        result.setTestedAt(LocalDateTime.now());

        result.setHivNegative(req.isHivNegative());
        result.setHbvNegative(req.isHbvNegative());
        result.setHcvNegative(req.isHcvNegative());
        result.setSyphilisNegative(req.isSyphilisNegative());
        result.setMalariaNegative(req.isMalariaNegative());

        boolean passed = req.isHivNegative() &&
                req.isHbvNegative() &&
                req.isHcvNegative() &&
                req.isSyphilisNegative() &&
                req.isMalariaNegative();
        result.setPassed(passed);

        return result;
>>>>>>> origin/main
    }
}
