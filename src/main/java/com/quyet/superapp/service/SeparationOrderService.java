package com.quyet.superapp.service;

<<<<<<< HEAD
import com.quyet.superapp.dto.BloodUnitDTO;
import com.quyet.superapp.dto.SeparationResultDTO;
import com.quyet.superapp.entity.*;
import com.quyet.superapp.enums.BloodBagStatus;
import com.quyet.superapp.enums.BloodUnitStatus;
import com.quyet.superapp.enums.SeparationMethod;
import com.quyet.superapp.mapper.BloodUnitMapper;
import com.quyet.superapp.repository.*;
import com.quyet.superapp.util.BloodSeparationCalculator;
import com.quyet.superapp.dto.BloodSeparationSuggestionDTO;
import com.quyet.superapp.dto.CreateSeparationWithSuggestionRequest;
import com.quyet.superapp.util.CodeGeneratorUtil;
=======
import com.quyet.superapp.dto.*;
import com.quyet.superapp.entity.*;
import com.quyet.superapp.enums.*;
import com.quyet.superapp.mapper.*;
import com.quyet.superapp.repository.*;
import com.quyet.superapp.util.*;
>>>>>>> origin/main
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class SeparationOrderService {

    private final SeparationOrderRepository separationOrderRepository;
    private final BloodBagRepository bloodBagRepository;
    private final UserRepository userRepository;
    private final ApheresisMachineRepository apheresisMachineRepository;
    private final SeparationPresetService presetService;
    private final BloodSeparationCalculator calculator;
    private final BloodComponentRepository bloodComponentRepository;
    private final BloodUnitRepository bloodUnitRepository;
<<<<<<< HEAD
    /**
     * T·∫°o m·ªôt l·ªánh t√°ch m√°u m·ªõi
     */
    @Transactional
    public SeparationOrder createSeparationOrder(Long bloodBagId,
                                                 Long operatorId,
                                                 Long machineId,
                                                 SeparationMethod type,
                                                 String note) {
        BloodBag bag = bloodBagRepository.findById(bloodBagId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y t√∫i m√°u"));

        User operator = userRepository.findById(operatorId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n thao t√°c"));

        ApheresisMachine machine = null;
        if (type == SeparationMethod.MACHINE) {
            machine = apheresisMachineRepository.findById(machineId)
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y m√°y t√°ch m√°u"));
        }


=======
    private final SeparationResultRepository separationResultRepository;
    private final BloodSeparationSuggestionRepository bloodSeparationSuggestionRepository;
    private final BloodInventorySyncService bloodInventorySyncService;
    private final DonationRepository donationRepository;

    // ‚úÖ T·∫°o l·ªánh t√°ch m√°u th·ªß c√¥ng (manual) c√≥ sinh ƒë∆°n v·ªã m√°u t·ª´ volume m·∫∑c ƒë·ªãnh
    @Transactional
    public SeparationResultDTO createSeparationOrderEntity(
            Long bloodBagId, Long operatorId,
            Long machineId, SeparationMethod type, String note
    ) {
        BloodBag bag = getBloodBagValidated(bloodBagId);
        checkNotSeparated(bag);
        validateVolume(bag);

        User operator = getOperator(operatorId);
        ApheresisMachine machine = (type == SeparationMethod.MACHINE) ? getMachine(machineId) : null;

        SeparationOrder order = buildAndSaveOrder(bag, operator, machine, type, note);
        bag.setStatus(BloodBagStatus.SEPARATED);
        bloodBagRepository.save(bag);

        BloodSeparationSuggestion suggestion = buildManualSuggestion(bag, operator);
        bloodSeparationSuggestionRepository.save(suggestion);

        createBloodUnitsFromSuggestion(suggestion, bag, order);
        List<BloodUnit> units = bloodUnitRepository.findBySeparationOrder(order);

        SeparationResult result = buildSeparationResult(order, operator, note, suggestion);
        separationResultRepository.save(result);

        return SeparationResultMapper.toDTO(
                result,
                BloodSeparationSuggestionMapper.toDTO(suggestion),
                units
        );
    }

    // üîß X√¢y d·ª±ng g·ª£i √Ω th·ªß c√¥ng t·ª´ volume t√∫i m√°u
    private BloodSeparationSuggestion buildManualSuggestion(BloodBag bag, User operator) {
        int total = bag.getVolume();
        int red = (int) (total * 0.48);
        int plasma = (int) (total * 0.42);
        int platelets = total - red - plasma;

        BloodSeparationSuggestion suggestion = new BloodSeparationSuggestion();
        suggestion.setRedCells(red);
        suggestion.setPlasma(plasma);
        suggestion.setPlatelets(platelets);
        suggestion.setRedCellsCode("PRC-" + bag.getBloodType().getDescription());
        suggestion.setPlasmaCode("FFP-" + bag.getBloodType().getDescription());
        suggestion.setPlateletsCode("PLT-" + bag.getBloodType().getDescription());
        suggestion.setDescription("Manual separation: 48% / 42% / 10%");
        suggestion.setCreatedAt(LocalDateTime.now());
        suggestion.setGeneratedBy(operator);
        return suggestion;
    }

    // üîß X√¢y d·ª±ng ƒë·ªëi t∆∞·ª£ng k·∫øt qu·∫£ sau khi t√°ch
    private SeparationResult buildSeparationResult(SeparationOrder order, User operator, String note, BloodSeparationSuggestion suggestion) {
        SeparationResult result = new SeparationResult();
        result.setOrder(order);
        result.setProcessedBy(operator);
        result.setCompletedAt(LocalDateTime.now());
        result.setNote(note);
        result.setSuggestion(suggestion);
        return result;
    }

    // ‚úÖ Validate th·ªÉ t√≠ch t√∫i m√°u (250 - 500ml)
    private void validateVolume(BloodBag bag) {
        int volume = bag.getVolume();
        if (volume < 250 || volume > 500) {
            throw new IllegalArgumentException("Th·ªÉ t√≠ch t√∫i m√°u ph·∫£i t·ª´ 250ml ƒë·∫øn 500ml");
        }
    }

    // ‚úÖ T·∫°o l·ªánh t√°ch m√°u d·ª±a theo g·ª£i √Ω preset (c√≥ gender, weight, etc.)
    @Transactional
    public SeparationResultDTO createWithSuggestion(CreateSeparationWithSuggestionRequest request) {
        BloodBag bag = getBloodBagValidated(request.getBloodBagId());
        User operator = getOperator(request.getOperatorId());
        ApheresisMachine machine = resolveMachineIfNeeded(request.getType(), request.getMachineId());

        BloodSeparationSuggestion suggestion = generateSuggestionFromPreset(bag, operator, request);
        SeparationOrder order = buildAndSaveOrder(bag, operator, machine, request.getType(), request.getNote());

        updateBagStatusToSeparated(bag);

        createBloodUnitsFromSuggestion(suggestion, bag, order);
        SeparationResult result = saveSeparationResult(order, operator, suggestion, request.getNote());
        List<BloodUnit> units = bloodUnitRepository.findBySeparationOrder(order);

        return SeparationResultMapper.toDTO(result, BloodSeparationSuggestionMapper.toDTO(suggestion), units);
    }

    // üîß L·∫•y m√°y n·∫øu ph∆∞∆°ng th·ª©c l√† MACHINE
    private ApheresisMachine resolveMachineIfNeeded(SeparationMethod type, Long machineId) {
        return (type == SeparationMethod.MACHINE) ? getMachine(machineId) : null;
    }

    // üîß Sinh g·ª£i √Ω t·ª´ preset c·∫•u h√¨nh (gender, weight...)
    private BloodSeparationSuggestion generateSuggestionFromPreset(
            BloodBag bag, User operator, CreateSeparationWithSuggestionRequest request) {
        SeparationPresetConfig preset = presetService.getPreset(
                request.getGender(), request.getWeight(),
                request.getType().name(), request.isLeukoreduced());

        BloodSeparationSuggestion suggestion = calculator.calculateFromPreset(bag, preset);
        suggestion.setCreatedAt(LocalDateTime.now());
        suggestion.setGeneratedBy(operator);
        return bloodSeparationSuggestionRepository.save(suggestion);
    }

    // üîß C·∫≠p nh·∫≠t tr·∫°ng th√°i t√∫i m√°u l√† ƒë√£ t√°ch
    private void updateBagStatusToSeparated(BloodBag bag) {
        bag.setStatus(BloodBagStatus.SEPARATED);
        bloodBagRepository.save(bag);
    }

    // üîß L∆∞u k·∫øt qu·∫£ t√°ch m√°u
    private SeparationResult saveSeparationResult(SeparationOrder order, User operator,
                                                  BloodSeparationSuggestion suggestion, String note) {
        SeparationResult result = new SeparationResult();
        result.setOrder(order);
        result.setProcessedBy(operator);
        result.setCompletedAt(LocalDateTime.now());
        result.setNote(note);
        result.setSuggestion(suggestion);
        return separationResultRepository.save(result);
    }

    // ‚úÖ T·∫°o b·∫£n ghi l·ªánh t√°ch ƒë∆°n gi·∫£n, kh√¥ng sinh ƒë∆°n v·ªã m√°u
    @Transactional
    public SeparationOrder createSeparationOrder(Long bloodBagId, Long operatorId,
                                                 Long machineId, SeparationMethod type, String note) {
        BloodBag bag = getBloodBagValidated(bloodBagId);
        User operator = getOperator(operatorId);
        ApheresisMachine machine = (type == SeparationMethod.MACHINE) ? getMachine(machineId) : null;
        return buildAndSaveOrder(bag, operator, machine, type, note);
    }

    // üîß T·∫°o v√† l∆∞u l·ªánh t√°ch m√°u
    private SeparationOrder buildAndSaveOrder(BloodBag bag, User operator,
                                              ApheresisMachine machine, SeparationMethod type, String note) {
>>>>>>> origin/main
        SeparationOrder order = new SeparationOrder();
        order.setBloodBag(bag);
        order.setPerformedBy(operator);
        order.setMachine(machine);
        order.setSeparationMethod(type);
        order.setPerformedAt(LocalDateTime.now());
        order.setNote(note);
<<<<<<< HEAD

        return separationOrderRepository.save(order);
    }

    /**
     * Truy xu·∫•t t·∫•t c·∫£ c√°c l·ªánh t√°ch
     */
    public List<SeparationOrder> getAll() {
        return separationOrderRepository.findAll();
    }

    /**
     * Truy xu·∫•t theo lo·∫°i t√°ch
     */
    public List<SeparationOrder> findByType(SeparationMethod method) {
        return separationOrderRepository.findBySeparationMethod(method);
    }

    /**
     * Truy xu·∫•t theo nh√¢n vi√™n thao t√°c
     */
    public List<SeparationOrder> findByOperator(Long userId) {
        return separationOrderRepository.findByPerformedBy_UserId(userId);
    }

    /**
     * Truy xu·∫•t theo m√£ t√∫i m√°u
     */
    public List<SeparationOrder> findByBagCode(String bagCode) {
        return separationOrderRepository.findByBloodBag_BagCode(bagCode);
    }

    /**
     * Ki·ªÉm tra xem t√∫i m√°u ƒë√£ ƒë∆∞·ª£c t√°ch ch∆∞a
     */
    public boolean hasBeenSeparated(Long bloodBagId) {
        return separationOrderRepository.existsByBloodBag_BloodBagId(bloodBagId);
    }

    /**
     * T√¨m theo th·ªùi gian
     */
    public List<SeparationOrder> findBetween(LocalDateTime start, LocalDateTime end) {
        return separationOrderRepository.findByPerformedAtBetween(start, end);
    }

    public SeparationResultDTO createWithSuggestion(CreateSeparationWithSuggestionRequest request) {
        // 1. L·∫•y t√∫i m√°u
        BloodBag bloodBag = bloodBagRepository.findById(request.getBloodBagId())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y t√∫i m√°u"));

        // Ki·ªÉm tra th·ªÉ t√≠ch t·ªëi thi·ªÉu
        if (bloodBag.getVolume() < 250) {
            throw new IllegalArgumentException("Th·ªÉ t√≠ch t√∫i m√°u qu√° nh·ªè ƒë·ªÉ t√°ch (ph·∫£i >= 250ml)");
        }

        // 2. L·∫•y nh√¢n vi√™n
        User operator = userRepository.findById(request.getOperatorId())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n"));

        // 3. N·∫øu l√† ph∆∞∆°ng ph√°p MACHINE ‚Üí b·∫Øt bu·ªôc ph·∫£i c√≥ m√°y
        ApheresisMachine machine = null;
        if (request.getType() == SeparationMethod.MACHINE) {
            if (request.getMachineId() == null) {
                throw new IllegalArgumentException("C·∫ßn cung c·∫•p ID m√°y khi t√°ch b·∫±ng m√°y.");
            }
            machine = apheresisMachineRepository.findById(request.getMachineId())
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y m√°y t√°ch m√°u"));
        }

        // 4. T√¨m preset ph√π h·ª£p
        SeparationPresetConfig preset = presetService.getPreset(
                request.getGender(),
                request.getWeight(),
                request.getType().name(),
                request.isLeukoreduced()
        );

        // 5. T√≠nh to√°n g·ª£i √Ω
        BloodSeparationSuggestionDTO suggestion = calculator.calculateFromPreset(bloodBag, preset);

        // 6. T·∫°o l·ªánh t√°ch m√°u
        SeparationOrder order = new SeparationOrder();
        order.setBloodBag(bloodBag);
        order.setPerformedBy(operator);
        order.setMachine(machine);
        order.setSeparationMethod(request.getType());
        order.setPerformedAt(LocalDateTime.now());
        order.setNote(request.getNote());
        separationOrderRepository.save(order);

        // 7. ƒê·ªïi tr·∫°ng th√°i t√∫i m√°u g·ªëc
        bloodBag.setStatus(BloodBagStatus.SEPARATED); // Enum b·∫°n c·∫ßn t·∫°o n·∫øu ch∆∞a c√≥
        bloodBagRepository.save(bloodBag);

        // 8. T·∫°o c√°c ƒë∆°n v·ªã m√°u t·ª´ g·ª£i √Ω
        createBloodUnitsFromSuggestion(suggestion, bloodBag, order);

        // 9. Truy xu·∫•t l·∫°i c√°c ƒë∆°n v·ªã m√°u ƒë√£ sinh ra
        List<BloodUnit> createdUnits = bloodUnitRepository.findBySeparationOrder(order);
        List<BloodUnitDTO> dtoUnits = createdUnits.stream()
                .map(BloodUnitMapper::toDTO)
                .collect(Collectors.toList());


        return new SeparationResultDTO(order.getSeparationOrderId(), suggestion, dtoUnits);

    }
    private void createBloodUnitsFromSuggestion(BloodSeparationSuggestionDTO suggestion,
                                                BloodBag bloodBag,
                                                SeparationOrder order) {
        createUnit(suggestion.getRedCellsMl(), "H·ªíNG C·∫¶U", bloodBag, order);
        createUnit(suggestion.getPlasmaMl(), "HUY·∫æT T∆Ø∆†NG", bloodBag, order);
        createUnit(suggestion.getPlateletsMl(), "TI·ªÇU C·∫¶U", bloodBag, order);
    }

    private void createUnit(int volume, String componentName,
                            BloodBag bag, SeparationOrder order) {
        if (volume <= 0) return;

        BloodComponent component = bloodComponentRepository
                .findByNameIgnoreCase(componentName)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y th√†nh ph·∫ßn m√°u: " + componentName));


        // üëâ G√°n m√£ vi·∫øt t·∫Øt cho component
=======
        return separationOrderRepository.save(order);
    }

    // ‚úÖ Ki·ªÉm tra v√† tr·∫£ v·ªÅ t√∫i m√°u h·ª£p l·ªá
    private BloodBag getBloodBagValidated(Long id) {
        BloodBag bag = bloodBagRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y t√∫i m√°u"));
        if (bag.getVolume() < 250) {
            throw new IllegalArgumentException("Th·ªÉ t√≠ch t√∫i m√°u qu√° nh·ªè ƒë·ªÉ t√°ch (ph·∫£i >= 250ml)");
        }
        return bag;
    }

    // ‚úÖ Ki·ªÉm tra t√∫i m√°u ƒë√£ t√°ch ch∆∞a
    private void checkNotSeparated(BloodBag bag) {
        if (hasBeenSeparated(bag.getBloodBagId())) {
            throw new IllegalStateException("T√∫i m√°u n√†y ƒë√£ ƒë∆∞·ª£c t√°ch tr∆∞·ªõc ƒë√≥.");
        }
    }

    // ‚úÖ Truy v·∫•n operator t·ª´ ID
    private User getOperator(Long id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n thao t√°c"));
    }

    // ‚úÖ Truy v·∫•n m√°y t√°ch t·ª´ IDx`
    private ApheresisMachine getMachine(Long id) {
        return apheresisMachineRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y m√°y t√°ch m√°u"));
    }

    // ‚úÖ T·∫°o c√°c ƒë∆°n v·ªã m√°u t·ª´ g·ª£i √Ω (3 lo·∫°i: H·ªìng c·∫ßu, huy·∫øt t∆∞∆°ng, ti·ªÉu c·∫ßu)
    private void createBloodUnitsFromSuggestion(BloodSeparationSuggestion suggestion,
                                                BloodBag bloodBag, SeparationOrder order) {
        createUnit(suggestion.getRedCells(), "H·ªíNG C·∫¶U", bloodBag, order);
        createUnit(suggestion.getPlasma(), "HUY·∫æT T∆Ø∆†NG", bloodBag, order);
        createUnit(suggestion.getPlatelets(), "TI·ªÇU C·∫¶U", bloodBag, order);
    }

    // üîß T·∫°o ƒë∆°n v·ªã m√°u c·ª• th·ªÉ
    private void createUnit(int volume, String componentName,
                            BloodBag bag, SeparationOrder order) {
        if (volume <= 0) return;
        var component = bloodComponentRepository.findByName(componentName)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y th√†nh ph·∫ßn m√°u: " + componentName));
>>>>>>> origin/main
        String componentCode = switch (componentName) {
            case "H·ªíNG C·∫¶U" -> "RBC";
            case "HUY·∫æT T∆Ø∆†NG" -> "PLAS";
            case "TI·ªÇU C·∫¶U" -> "PLT";
            default -> "UNK";
        };
<<<<<<< HEAD

=======
>>>>>>> origin/main
        String unitCode = CodeGeneratorUtil.generateUniqueUnitCode(bag, componentCode, bloodUnitRepository);

        var unit = new BloodUnit();
        unit.setQuantityMl(volume);
        unit.setComponent(component);
        unit.setBloodBag(bag);
        unit.setBloodType(bag.getBloodType());
        unit.setSeparationOrder(order);
<<<<<<< HEAD
        unit.setStatus(BloodUnitStatus.AVAILABLE); // ho·∫∑c AVAILABLE
=======
        unit.setStatus(BloodUnitStatus.AVAILABLE);
>>>>>>> origin/main
        unit.setCreatedAt(LocalDateTime.now());
        unit.setUnitCode(unitCode);

        bloodUnitRepository.save(unit);
<<<<<<< HEAD
    }

}
=======
        bloodInventorySyncService.syncInventory(unit);
    }

    // ‚úÖ L·∫•y danh s√°ch DTO c√°c ƒë∆°n v·ªã m√°u c·ªßa m·ªôt l·ªánh t√°ch
    private List<BloodUnitDTO> getDTOUnits(SeparationOrder order) {
        return bloodUnitRepository.findBySeparationOrder(order).stream()
                .map(BloodUnitMapper::toDTO)
                .collect(Collectors.toList());
    }

    // ‚úÖ L·∫•y chi ti·∫øt ƒë·∫ßy ƒë·ªß l·ªánh t√°ch theo ID
    public SeparationOrderFullDTO getFullOrderWithUnits(Long orderId) {
        SeparationOrder order = separationOrderRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y l·ªánh t√°ch"));
        List<BloodUnitDTO> units = getDTOUnits(order);
        return SeparationOrderFullMapper.toFullDTO(order, units);
    }

    // ‚úÖ Truy v·∫•n t·∫•t c·∫£ l·ªánh t√°ch
    public List<SeparationOrder> getAll() {
        return separationOrderRepository.findAll();
    }

    // ‚úÖ Truy v·∫•n l·ªánh theo lo·∫°i t√°ch
    public List<SeparationOrder> findByType(SeparationMethod method) {
        return separationOrderRepository.findBySeparationMethod(method);
    }

    // ‚úÖ Truy v·∫•n l·ªánh theo nh√¢n vi√™n thao t√°c
    public List<SeparationOrder> findByOperator(Long userId) {
        return separationOrderRepository.findByPerformedBy_UserId(userId);
    }

    // ‚úÖ Truy v·∫•n l·ªánh theo m√£ t√∫i m√°u
    public List<SeparationOrder> findByBagCode(String bagCode) {
        return separationOrderRepository.findByBloodBag_BagCode(bagCode);
    }

    // ‚úÖ Ki·ªÉm tra t√∫i m√°u ƒë√£ t·ª´ng t√°ch ch∆∞a
    public boolean hasBeenSeparated(Long bloodBagId) {
        return separationOrderRepository.existsByBloodBag_BloodBagId(bloodBagId);
    }

    // ‚úÖ L·ªçc l·ªánh t√°ch theo kho·∫£ng th·ªùi gian
    public List<SeparationOrder> findBetween(LocalDateTime start, LocalDateTime end) {
        return separationOrderRepository.findByPerformedAtBetween(start, end);
    }

    // ‚úÖ T·∫°o t√∫i m√°u th·ªß c√¥ng t·ª´ DTO (nh·∫≠p tay m√£ t√∫i, th·ªÉ t√≠ch...)
    @Transactional
    public BloodBag createManualBloodBagFromDTO(BloodBagDTO dto, Long donationId) {
        Donation donation = validateDonationForNewBag(donationId);
        BloodBag bag = mapDTOToBloodBag(dto, donation);

        bloodBagRepository.save(bag);
        donation.setBloodBag(bag);
        donationRepository.save(donation);

        return bag;
    }

    // T√°ch validate + l·∫•y donation
    private Donation validateDonationForNewBag(Long donationId) {
        Donation donation = donationRepository.findById(donationId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ƒë∆°n hi·∫øn m√°u"));

        if (donation.getBloodBag() != null) {
            throw new IllegalStateException("ƒê∆°n hi·∫øn m√°u ƒë√£ c√≥ t√∫i m√°u. Kh√¥ng th·ªÉ t·∫°o th√™m.");
        }
        return donation;
    }

    // T√°ch √°nh x·∫° t·ª´ DTO sang Entity (c√≥ th√™m m·∫∑c ƒë·ªãnh volume, collectedAt...)
    private BloodBag mapDTOToBloodBag(BloodBagDTO dto, Donation donation) {
        BloodType bloodType = donation.getBloodType();

        // ‚úÖ T√¨m donor t·ª´ donorId trong DTO
        User donor = null;
        if (dto.getDonorId() != null) {
            donor = userRepository.findById(dto.getDonorId())
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi hi·∫øn m√°u"));
        }

        // ‚úÖ T·∫°o BloodBag entity t·ª´ mapper
        BloodBag bag = BloodBagMapper.fromDTO(dto, bloodType, donor);

        // ‚úÖ G√°n c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
        bag.setBagCode(CodeGeneratorUtil.generateBloodBagCode());
        bag.setVolume(dto.getVolume() != null ? dto.getVolume() : 350);
        bag.setCollectedAt(dto.getCollectedAt() != null ? dto.getCollectedAt() : LocalDateTime.now());
        bag.setTestStatus(dto.getTestStatus() != null ? dto.getTestStatus() : TestStatus.NOT_TESTED);
        bag.setStatus(dto.getStatus() != null ? dto.getStatus() : BloodBagStatus.COLLECTED);
        bag.setDonation(donation);

        return bag;
    }

    //    T√¨m ki·∫øm n√¢ng cao c√°c l·ªánh t√°ch m√°u d·ª±a tr√™n nhi·ªÅu ti√™u ch√≠:
    //          - Lo·∫°i t√°ch m√°u (SeparationMethod)
    //          - Nh√¢n vi√™n thao t√°c (Operator ID)
    //          - M√£ t√∫i m√°u (BagCode)
    //          - Th·ªùi gian th·ª±c hi·ªán (from - to)
    public List<SeparationOrderDTO> advancedSearch(SeparationOrderSearchRequest request) {
        return separationOrderRepository.findAll().stream()
                .filter(order -> {
                    if (request.getType() != null && !request.getType().equals(order.getSeparationMethod())) {
                        return false;
                    }
                    if (request.getOperatorId() != null && !request.getOperatorId().equals(order.getPerformedBy().getUserId())) {
                        return false;
                    }
                    if (request.getBagCode() != null && !order.getBloodBag().getBagCode().contains(request.getBagCode())) {
                        return false;
                    }
                    if (request.getFrom() != null && order.getPerformedAt().isBefore(request.getFrom())) {
                        return false;
                    }
                    if (request.getTo() != null && order.getPerformedAt().isAfter(request.getTo())) {
                        return false;
                    }
                    return true;
                })
                .map(SeparationOrderMapper::toDTO)
                .collect(Collectors.toList());
    }
    //    *  C·∫≠p nh·∫≠t l·ªánh t√°ch m√°u:
    //              - Ghi ch√∫ (note)
    // *  - Ng∆∞·ªùi thao t√°c (operatorId)
    //         *  Ch·ªâ c·∫≠p nh·∫≠t n·∫øu tr∆∞·ªùng t∆∞∆°ng ·ª©ng kh√°c null.
    //          ‚úÖ C√≥ ki·ªÉm tra t·ªìn t·∫°i order v√† user.
    @Transactional
    public SeparationOrderDTO updateOrder(Long id, UpdateSeparationOrderRequest request) {
        SeparationOrder order = separationOrderRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y l·ªánh t√°ch m√°u"));

        if (request.getNote() != null) {
            order.setNote(request.getNote());
        }

        if (request.getOperatorId() != null) {
            User newOperator = userRepository.findById(request.getOperatorId())
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n thao t√°c m·ªõi"));
            order.setPerformedBy(newOperator);
        }

        return SeparationOrderMapper.toDTO(separationOrderRepository.save(order));
    }
    //    Xo√° l·ªánh t√°ch m√°u theo ID.
    //            - N·∫øu h·ªá th·ªëng h·ªó tr·ª£ "soft delete" th√¨ n√™n c·∫≠p nh·∫≠t tr·∫°ng th√°i thay v√¨ g·ªçi delete().
    //            - Hi·ªán t·∫°i d√πng hard-delete tr·ª±c ti·∫øp t·ª´ repository.
    @Transactional
    public void softDeleteOrder(Long id) {
        SeparationOrder order = separationOrderRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y l·ªánh t√°ch m√°u"));
        separationOrderRepository.delete(order);
    }

}
>>>>>>> origin/main
