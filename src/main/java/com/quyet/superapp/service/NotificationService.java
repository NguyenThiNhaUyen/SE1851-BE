package com.quyet.superapp.service;

import com.quyet.superapp.entity.Notification;
import com.quyet.superapp.entity.User;
import com.quyet.superapp.repository.NotificationRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class NotificationService {

    private final NotificationRepository notificationRepository;

    public List<Notification> getByUserId(Long userId) {
        return notificationRepository.findByUser_UserId(userId);
    }

    public List<Notification> getUnreadByUserId(Long userId) {
        return notificationRepository.findByUser_UserIdAndIsReadFalse(userId);
    }

    // ‚úÖ L·∫•y t·∫•t c·∫£ th√¥ng b√°o (admin c√≥ th·ªÉ d√πng)
    public List<Notification> getAll() {
        return notificationRepository.findAll();
    }

    // ‚úÖ L·∫•y th√¥ng b√°o theo ID
    public Optional<Notification> getById(Long id) {
        return notificationRepository.findById(id);
    }

    // ‚úÖ T·∫°o m·ªõi 1 th√¥ng b√°o (s·ª≠ d·ª•ng cho in-app notification)
    public Notification create(Notification notification) {
        if (notification.getSentAt() == null) {
            notification.setSentAt(LocalDateTime.now());
        }
        notification.setIsRead(false);
        return notificationRepository.save(notification);
    }

    // ‚úÖ C·∫≠p nh·∫≠t th√¥ng b√°o (n·ªôi dung, th·ªùi gian, ng∆∞·ªùi nh·∫≠n, tr·∫°ng th√°i ƒë√£ ƒë·ªçc)
    public Notification update(Long id, Notification updatedNotification) {
        return notificationRepository.findById(id)
                .map(existing -> {
                    existing.setContent(updatedNotification.getContent());
                    existing.setSentAt(updatedNotification.getSentAt());
                    existing.setIsRead(updatedNotification.getIsRead());
                    existing.setUser(updatedNotification.getUser());
                    return notificationRepository.save(existing);
                })
                .orElse(null);
    }

    // ‚úÖ Xo√° th√¥ng b√°o theo ID
    public void delete(Long id) {
        notificationRepository.deleteById(id);
    }

    // ‚úÖ G·ª≠i th√¥ng b√°o kh·∫©n c·∫•p qua 3 k√™nh: app + email + SMS gi·∫£ l·∫≠p
    public void sendEmergencyContact(User user, String message) {
        // G·ª≠i in-app notification
        Notification notification = new Notification();
        notification.setUser(user);
        notification.setContent(message);
        notification.setSentAt(LocalDateTime.now());
        notification.setIsRead(false);
        notificationRepository.save(notification);

        // G·ª≠i email n·∫øu c√≥
        if (user.getEmail() != null && !user.getEmail().isBlank()) {
            System.out.println("üìß G·ª≠i email ƒë·∫øn " + user.getEmail() + ": " + message);
        }

        // G·ª≠i SMS n·∫øu c√≥ s·ªë ƒëi·ªán tho·∫°i
        if (user.getUserProfile() != null && user.getUserProfile().getPhone() != null) {
            System.out.println("üì± G·ª≠i SMS/G·ªçi ƒë·∫øn " + user.getUserProfile().getPhone() + ": " + message);
        }
    }
}
