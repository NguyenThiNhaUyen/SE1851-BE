package com.quyet.superapp.service;

import com.quyet.superapp.dto.UrgentDonorRegistrationDTO;
import com.quyet.superapp.dto.UserProfileDTO;
import com.quyet.superapp.entity.User;
import com.quyet.superapp.entity.UserProfile;
import com.quyet.superapp.entity.address.Address;
import com.quyet.superapp.entity.address.Ward;
import com.quyet.superapp.mapper.AddressMapper;
import com.quyet.superapp.repository.UserProfileRepository;
import com.quyet.superapp.repository.UserRepository;
import com.quyet.superapp.repository.address.AddressRepository;
import com.quyet.superapp.repository.address.WardRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class UserProfileService {

    private final UserProfileRepository userProfileRepository;
    private final UserRepository userRepository;
    private final AddressRepository addressRepository;
    private final WardRepository wardRepository;

    // ‚úÖ L·∫•y t·∫•t c·∫£ h·ªì s∆°
    public List<UserProfile> getAllProfiles() {
        return userProfileRepository.findAll();
    }

    // ‚úÖ L·∫•y h·ªì s∆° theo userId
    public UserProfile getProfileByUserId(Long userId) {
        return userProfileRepository.findByUser_UserId(userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y h·ªì s∆° ng∆∞·ªùi d√πng v·ªõi ID: " + userId));
    }

    // ‚úÖ T·∫°o m·ªõi h·ªì s∆° t·ª´ DTO
    public UserProfile createProfile(Long userId, UserProfileDTO dto) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " + userId));

        if (userProfileRepository.existsByCitizenId(dto.getCitizenId())) {
            throw new IllegalArgumentException("CCCD ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng");
        }

        if (userProfileRepository.existsByEmail(dto.getEmail())) {
            throw new IllegalArgumentException("Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng");
        }

        if (user.getUserProfile() != null) {
            throw new IllegalStateException("Ng∆∞·ªùi d√πng ƒë√£ c√≥ h·ªì s∆°. Vui l√≤ng c·∫≠p nh·∫≠t.");
        }

        UserProfile profile = mapDTOtoEntity(dto, user);
        return userProfileRepository.save(profile);
    }

    // ‚úÖ C·∫≠p nh·∫≠t h·ªì s∆°
    public UserProfile updateProfile(Long userId, UserProfileDTO dto) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " + userId));

        UserProfile profile = user.getUserProfile();
        if (profile == null) {
            profile = new UserProfile();
            profile.setUser(user);
        }

        if (dto.getCitizenId() != null &&
                !dto.getCitizenId().equals(profile.getCitizenId()) &&
                userProfileRepository.existsByCitizenId(dto.getCitizenId())) {
            throw new IllegalArgumentException("CCCD ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng");
        }

        if (dto.getEmail() != null &&
                !dto.getEmail().equals(profile.getEmail()) &&
                userProfileRepository.existsByEmail(dto.getEmail())) {
            throw new IllegalArgumentException("Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng");
        }

        updateEntityFromDTO(profile, dto);
        return userProfileRepository.save(profile);
    }

    // ‚úÖ T·∫°o h·ªì s∆° t·ª´ ƒëƒÉng k√Ω ng∆∞·ªùi hi·∫øn kh·∫©n c·∫•p
    public UserProfile createFromRegistration(User user, UrgentDonorRegistrationDTO dto, Address address) {
        UserProfile profile = new UserProfile();
        profile.setUser(user);
        profile.setFullName(dto.getFullName());
        profile.setDob(dto.getDob());
        profile.setGender(dto.getGender());
        profile.setPhone(dto.getPhone());
        profile.setLatitude(dto.getLatitude());
        profile.setLongitude(dto.getLongitude());
        profile.setLocation(dto.getLocation());
        profile.setAddress(address);
        return userProfileRepository.save(profile);
    }

    // ‚úÖ L·∫•y h·ªì s∆° theo username (d√πng trong x√°c th·ª±c)
    public UserProfile getByUsername(String username) {
        return userRepository.findByUsername(username)
                .flatMap(userProfileRepository::findByUser)
                .orElseThrow(() -> new UsernameNotFoundException("Kh√¥ng t√¨m th·∫•y h·ªì s∆° c·ªßa ng∆∞·ªùi d√πng: " + username));
    }

    // ‚úÖ L∆∞u h·ªì s∆° (d√πng chung)
    public UserProfile save(UserProfile profile) {
        return userProfileRepository.save(profile);
    }

    // ‚úÖ X√≥a theo ID
    public void deleteById(Long id) {
        userProfileRepository.deleteById(id);
    }

    // ‚úÖ L·∫•y theo ID
    public Optional<UserProfile> getById(Long id) {
        return userProfileRepository.findById(id);
    }

    // üîß Helper: T·∫°o entity t·ª´ DTO
    private UserProfile mapDTOtoEntity(UserProfileDTO dto, User user) {
        UserProfile profile = new UserProfile();
        profile.setUser(user);
        updateEntityFromDTO(profile, dto);
        return profile;
    }

    // üîß Helper: C·∫≠p nh·∫≠t entity t·ª´ DTO
    private void updateEntityFromDTO(UserProfile profile, UserProfileDTO dto) {
        profile.setFullName(dto.getFullName());
        profile.setDob(dto.getDob());
        profile.setGender(dto.getGender());
        profile.setBloodType(dto.getBloodType());

        // ‚úÖ ∆Øu ti√™n addressId (d·ªØ li·ªáu chu·∫©n), fallback sang AddressDTO n·∫øu c·∫ßn
        if (dto.getAddressId() != null) {
            Address address = addressRepository.findById(dto.getAddressId())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ"));
            profile.setAddress(address);
        } else if (dto.getAddress() != null && dto.getAddress().getWardId() != null) {
            Ward ward = wardRepository.findById(dto.getAddress().getWardId())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph∆∞·ªùng v·ªõi ID: " + dto.getAddress().getWardId()));
            Address address = AddressMapper.toEntity(dto.getAddress(), ward);
            profile.setAddress(address);
        }

        profile.setPhone(dto.getPhone());
        profile.setLandline(dto.getLandline());
        profile.setEmail(dto.getEmail());
        profile.setOccupation(dto.getOccupation());
        profile.setLastDonationDate(dto.getLastDonationDate());
        profile.setRecoveryTime(dto.getRecoveryTime());
        profile.setLocation(dto.getLocation());
        profile.setCitizenId(dto.getCitizenId());
    }
}
