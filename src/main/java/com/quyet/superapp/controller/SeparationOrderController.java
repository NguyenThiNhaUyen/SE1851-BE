package com.quyet.superapp.controller;

import com.quyet.superapp.dto.*;
import com.quyet.superapp.entity.BloodBag;
import com.quyet.superapp.enums.SeparationMethod;
import com.quyet.superapp.mapper.BloodBagMapper;
import com.quyet.superapp.mapper.SeparationOrderMapper;
import com.quyet.superapp.service.SeparationOrderService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;


@Validated
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/separation-orders")
public class SeparationOrderController {

    private final SeparationOrderService separationOrderService;

    /**
     * üìå T·∫°o l·ªánh t√°ch m√°u v·ªõi g·ª£i √Ω (preset) ‚Äì x√©t theo gi·ªõi t√≠nh, c√¢n n·∫∑ng, ph∆∞∆°ng ph√°p, gi·∫£m b·∫°ch c·∫ßu, v.v.
     */
    @PreAuthorize("hasRole('STAFF')")
    @PostMapping("/create-with-suggestion")
    public ResponseEntity<ApiResponseDTO<SeparationResultDTO>> createWithSuggestion(@Valid @RequestBody CreateSeparationWithSuggestionRequest request) {
        var result = separationOrderService.createWithSuggestion(request);
        return ResponseEntity.ok(ApiResponseDTO.success("T·∫°o l·ªánh t√°ch v·ªõi g·ª£i √Ω th√†nh c√¥ng", result));
    }

    /**
     * üõ† T·∫°o l·ªánh t√°ch m√°u th·ªß c√¥ng c∆° b·∫£n ‚Äì kh√¥ng sinh ƒë∆°n v·ªã m√°u, ch·ªâ l∆∞u th√¥ng tin l·ªánh.
     */
    @PreAuthorize("hasRole('STAFF')")
    @PostMapping("/basic-manual")
    public ResponseEntity<ApiResponseDTO<SeparationOrderDTO>> createBasicManual(@Valid @RequestBody SeparationOrderDTO dto) {
        var order = separationOrderService.createSeparationOrder(
                dto.getBloodBagId(), dto.getPerformedById(), dto.getApheresisMachineId(), dto.getSeparationType(), dto.getNote()
        );
        return ResponseEntity.ok(ApiResponseDTO.success("T·∫°o l·ªánh t√°ch th·ªß c√¥ng th√†nh c√¥ng", SeparationOrderMapper.toDTO(order)));
    }

    /**
     * üß™ T·∫°o l·ªánh t√°ch th·ªß c√¥ng k√®m vi·ªác t√°ch m√°u th·ª±c t·∫ø (sinh ƒë∆°n v·ªã m√°u theo t·ª∑ l·ªá th·ªß c√¥ng).
     */
    @PreAuthorize("hasRole('STAFF')")
    @PostMapping("/create-manual")
    public ResponseEntity<ApiResponseDTO<SeparationResultDTO>> createManualWithUnits(
            @RequestParam Long bloodBagId,
            @RequestParam Long operatorId,
            @RequestParam(required = false) Long machineId,
            @RequestParam SeparationMethod type,
            @RequestParam(required = false) String note
    ) {
        var result = separationOrderService.createSeparationOrderEntity(bloodBagId, operatorId, machineId, type, note);
        return ResponseEntity.ok(ApiResponseDTO.success("T·∫°o l·ªánh v√† sinh ƒë∆°n v·ªã m√°u th√†nh c√¥ng", result));
    }

    /**
     * ‚úèÔ∏è C·∫≠p nh·∫≠t l·ªánh t√°ch m√°u ‚Äì ghi ch√∫ v√† ng∆∞·ªùi thao t√°c.
     */
    @PreAuthorize("hasRole('STAFF')")
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponseDTO<SeparationOrderDTO>> updateNoteOrOperator(@PathVariable Long id, @Valid @RequestBody UpdateSeparationOrderRequest request) {
        var updated = separationOrderService.updateOrder(id, request);
        return ResponseEntity.ok(ApiResponseDTO.success("C·∫≠p nh·∫≠t l·ªánh t√°ch th√†nh c√¥ng", updated));
    }

    /**
     * ‚ùå Hu·ª∑ (soft delete) l·ªánh t√°ch ‚Äì ch·ªâ Admin ƒë∆∞·ª£c ph√©p.
     */
    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponseDTO<Void>> softDeleteOrder(@PathVariable Long id) {
        separationOrderService.softDeleteOrder(id);
        return ResponseEntity.ok(ApiResponseDTO.success("Hu·ª∑ l·ªánh t√°ch m√°u th√†nh c√¥ng", null));
    }

    /**
     * üì• L·∫•y t·∫•t c·∫£ l·ªánh t√°ch m√°u (kh√¥ng ph√¢n lo·∫°i).
     */
    @GetMapping
    public ResponseEntity<ApiResponseDTO<List<SeparationOrderDTO>>> getAll() {
        var result = separationOrderService.getAll().stream().map(SeparationOrderMapper::toDTO).toList();
        return ResponseEntity.ok(ApiResponseDTO.success("L·∫•y danh s√°ch l·ªánh t√°ch m√°u", result));
    }
    /**
     * üîç L·ªçc l·ªánh theo lo·∫°i t√°ch m√°u (plasma, ti·ªÉu c·∫ßu, RBC,...)
     */
    @GetMapping("/type")
    public ResponseEntity<ApiResponseDTO<List<SeparationOrderDTO>>> getByType(@RequestParam SeparationMethod type) {
        var result = separationOrderService.findByType(type).stream().map(SeparationOrderMapper::toDTO).toList();
        return ResponseEntity.ok(ApiResponseDTO.success("L·ªçc theo lo·∫°i t√°ch th√†nh c√¥ng", result));
    }

    /**
     * üë®‚Äçüî¨ L·ªçc theo nh√¢n vi√™n thao t√°c (operator).
     */
    @GetMapping("/operator")
    public ResponseEntity<ApiResponseDTO<List<SeparationOrderDTO>>> getByOperator(@RequestParam Long userId) {
        var result = separationOrderService.findByOperator(userId).stream().map(SeparationOrderMapper::toDTO).toList();
        return ResponseEntity.ok(ApiResponseDTO.success("L·ªçc theo ng∆∞·ªùi thao t√°c th√†nh c√¥ng", result));
    }

    /**
     * üîñ L·ªçc theo m√£ t√∫i m√°u (bagCode).
     */
    @GetMapping("/bag")
    public ResponseEntity<ApiResponseDTO<List<SeparationOrderDTO>>> getByBagCode(@RequestParam String bagCode) {
        var result = separationOrderService.findByBagCode(bagCode).stream().map(SeparationOrderMapper::toDTO).toList();
        return ResponseEntity.ok(ApiResponseDTO.success("L·ªçc theo m√£ t√∫i m√°u th√†nh c√¥ng", result));
    }

    /**
     * ‚úÖ Ki·ªÉm tra t√∫i m√°u ƒë√£ ƒë∆∞·ª£c t√°ch ch∆∞a.
     */
    @GetMapping("/exists")
    public ResponseEntity<ApiResponseDTO<Boolean>> checkIfSeparated(@RequestParam Long bloodBagId) {
        boolean separated = separationOrderService.hasBeenSeparated(bloodBagId);
        return ResponseEntity.ok(ApiResponseDTO.success("Ki·ªÉm tra t√∫i m√°u ƒë√£ t√°ch", separated));
    }

    /**
     * üïí L·ªçc l·ªánh t√°ch theo kho·∫£ng th·ªùi gian (from - to).
     */
    @GetMapping("/time-range")
    public ResponseEntity<ApiResponseDTO<List<SeparationOrderDTO>>> getByTimeRange(
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime start,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime end
    ) {
        var result = separationOrderService.findBetween(start, end).stream().map(SeparationOrderMapper::toDTO).toList();
        return ResponseEntity.ok(ApiResponseDTO.success("L·ªçc theo th·ªùi gian th√†nh c√¥ng", result));
    }

    /**
     * üß† T√¨m ki·∫øm n√¢ng cao ‚Äì theo nhi·ªÅu ti√™u ch√≠ (m√°y, nh√¢n vi√™n, lo·∫°i t√°ch, th·ªùi gian, v.v.).
     */
    @PostMapping("/search")
    public ResponseEntity<ApiResponseDTO<List<SeparationOrderDTO>>> searchAdvanced(@Valid @RequestBody SeparationOrderSearchRequest request) {
        var result = separationOrderService.advancedSearch(request);
        return ResponseEntity.ok(ApiResponseDTO.success("T√¨m ki·∫øm n√¢ng cao th√†nh c√¥ng", result));
    }

    /**
     * üì¶ L·∫•y chi ti·∫øt l·ªánh t√°ch + danh s√°ch ƒë∆°n v·ªã m√°u ƒë∆∞·ª£c sinh ra.
     */
    @PreAuthorize("hasRole('ADMIN') or hasRole('STAFF')")
    @GetMapping("/with-units")
    public ResponseEntity<ApiResponseDTO<SeparationOrderFullDTO>> getFullOrderWithUnits(@RequestParam Long id) {
        var result = separationOrderService.getFullOrderWithUnits(id);
        return ResponseEntity.ok(ApiResponseDTO.success("L·∫•y chi ti·∫øt l·ªánh t√°ch m√°u", result));
    }

    /**
     * ü©∏ T·∫°o t√∫i m√°u th·ªß c√¥ng t·ª´ ƒë∆°n hi·∫øn m√°u (d√†nh cho ƒë∆°n ch∆∞a c√≥ t√∫i m√°u).
     */
    @PreAuthorize("hasRole('STAFF')")
    @PostMapping("/create-blood-bag")
    public ResponseEntity<ApiResponseDTO<BloodBagDTO>> createBloodBagManually(
            @RequestParam Long donationId,
            @Valid @RequestBody BloodBagDTO dto
    ) {
        BloodBag bag = separationOrderService.createManualBloodBagFromDTO(dto, donationId);
        return ResponseEntity.ok(ApiResponseDTO.success("T·∫°o t√∫i m√°u th·ªß c√¥ng th√†nh c√¥ng", BloodBagMapper.toDTO(bag)));
    }
}

