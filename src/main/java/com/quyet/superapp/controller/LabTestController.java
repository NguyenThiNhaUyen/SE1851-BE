package com.quyet.superapp.controller;

import com.quyet.superapp.dto.ApiResponseDTO;
import com.quyet.superapp.dto.CreateLabTestRequest;
import com.quyet.superapp.dto.LabTestResultDTO;
import com.quyet.superapp.service.LabTestService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/lab-tests")
@RequiredArgsConstructor
public class LabTestController {

    private final LabTestService labTestService;

    /**
     * üß™ T·∫°o k·∫øt qu·∫£ x√©t nghi·ªám cho m·ªôt ƒë∆°n v·ªã m√°u.
     * ‚Äì Ki·ªÉm tra ƒë∆°n v·ªã m√°u c√≥ t·ªìn t·∫°i kh√¥ng
     * ‚Äì Ki·ªÉm tra ƒë√£ x√©t nghi·ªám ch∆∞a
     * ‚Äì Ghi nh·∫≠n k·∫øt qu·∫£ √¢m t√≠nh/ƒë·∫°t chu·∫©n
     */
    @PostMapping
    public ResponseEntity<ApiResponseDTO<LabTestResultDTO>> createLabTest(@Valid @RequestBody CreateLabTestRequest request) {
        LabTestResultDTO result = labTestService.createLabTestResult(request);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(ApiResponseDTO.success("T·∫°o k·∫øt qu·∫£ x√©t nghi·ªám th√†nh c√¥ng", result));
    }

    /**
     * üîç L·∫•y k·∫øt qu·∫£ x√©t nghi·ªám theo ƒë∆°n v·ªã m√°u.
     */
    @GetMapping("/by-blood-unit")
    public ResponseEntity<ApiResponseDTO<LabTestResultDTO>> getByBloodUnit(@RequestParam Long bloodUnitId) {
        return labTestService.getByBloodUnit(bloodUnitId)
                .map(result -> ResponseEntity.ok(ApiResponseDTO.success("L·∫•y k·∫øt qu·∫£ th√†nh c√¥ng", result)))
                .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).body(ApiResponseDTO.fail("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ x√©t nghi·ªám")));
    }

    /**
     * ‚úÖ Ki·ªÉm tra ƒë∆°n v·ªã m√°u ƒë√£ ƒë∆∞·ª£c x√©t nghi·ªám hay ch∆∞a.
     * ‚Äì Tr·∫£ v·ªÅ true/false
     */
    @GetMapping("/check")
    public ResponseEntity<ApiResponseDTO<Boolean>> checkTested(@RequestParam Long bloodUnitId) {
        boolean result = labTestService.isTested(bloodUnitId);
        return ResponseEntity.ok(ApiResponseDTO.success("Ki·ªÉm tra x√©t nghi·ªám th√†nh c√¥ng", result));
    }

    /**
     * üìã L·∫•y t·∫•t c·∫£ k·∫øt qu·∫£ x√©t nghi·ªám trong h·ªá th·ªëng.
     */
    @GetMapping
    public ResponseEntity<ApiResponseDTO<List<LabTestResultDTO>>> getAll() {
        List<LabTestResultDTO> results = labTestService.getAllResults();
        return ResponseEntity.ok(ApiResponseDTO.success("L·∫•y danh s√°ch k·∫øt qu·∫£ x√©t nghi·ªám", results));
    }

    /**
     * ‚ùå Xo√° k·∫øt qu·∫£ x√©t nghi·ªám theo ID.
     * ‚Äì C·∫©n th·∫≠n: h√†nh ƒë·ªông kh√¥ng th·ªÉ ho√†n t√°c.
     */
    @DeleteMapping("/delete")
    public ResponseEntity<ApiResponseDTO<Void>> deleteResult(@RequestParam Long labTestResultId) {
        labTestService.deleteResult(labTestResultId);
        return ResponseEntity.ok(ApiResponseDTO.success("Xo√° k·∫øt qu·∫£ x√©t nghi·ªám th√†nh c√¥ng", null));
    }
}
