package com.quyet.superapp.util;

import com.quyet.superapp.dto.BloodSeparationSuggestionDTO;
import com.quyet.superapp.entity.BloodBag;
import com.quyet.superapp.entity.BloodSeparationSuggestion;
import com.quyet.superapp.entity.SeparationPresetConfig;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@Component
@Slf4j
public class BloodSeparationCalculator {

    public BloodSeparationSuggestion calculateFromPreset(BloodBag bloodBag, SeparationPresetConfig preset) {
        int volume = bloodBag.getVolume();
        if (volume <= 0) {
            throw new IllegalArgumentException("Th·ªÉ t√≠ch t√∫i m√°u kh√¥ng h·ª£p l·ªá.");
        }
        if (volume < 250) {
            log.warn("‚ö†Ô∏è Th·ªÉ t√≠ch t√∫i m√°u ({}ml) nh·ªè h∆°n 250ml ‚Äì c√≥ th·ªÉ kh√¥ng ph√π h·ª£p ƒë·ªÉ t√°ch.", volume);
        }


        String bloodGroup = (bloodBag.getBloodType() != null && bloodBag.getBloodType().getDescription() != null)
                ? bloodBag.getBloodType().getDescription()
                : "UNK";

        // 1. T√≠nh th·ªÉ t√≠ch theo preset
        int red = (int) Math.round(volume * preset.getRbcRatio());
        int plasma = (int) Math.round(volume * preset.getPlasmaRatio());
        int platelets = preset.getPlateletsFixed() > 0 ? preset.getPlateletsFixed() : volume - red - plasma;


        // 2. R√†ng bu·ªôc: t·ªïng kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t volume
        int total = red + plasma + platelets;
        if (total > volume) {
            int excess = total - volume;
            // Gi·∫£m ƒë·ªÅu t·ª´ plasma v√† platelets
            int half = excess / 2;
            plasma = Math.max(0, plasma - half);
            platelets = Math.max(0, platelets - (excess - half));

            log.info("üéØ ƒê√£ ƒëi·ªÅu ch·ªânh plasma xu·ªëng {}ml v√† platelets xu·ªëng {}ml do v∆∞·ª£t th·ªÉ t√≠ch t·ªïng.", plasma, platelets);
        }
        // 3. R√†ng bu·ªôc y t·∫ø: kh√¥ng ph·∫ßn n√†o < 10ml
        if (red < 10 || plasma < 10 || platelets < 10) {
            log.error("‚ùå Th√†nh ph·∫ßn m√°u nh·ªè h∆°n 10ml (RBC={}, Plasma={}, PLT={}) ‚Äì kh√¥ng ƒë·∫°t chu·∫©n.", red, plasma, platelets);
            throw new IllegalArgumentException("M·ªôt trong c√°c th√†nh ph·∫ßn m√°u c√≥ th·ªÉ t√≠ch nh·ªè h∆°n 10ml ‚Äì kh√¥ng ƒë·∫°t ti√™u chu·∫©n t√°ch.");
        }

        // 4. Gi·ªõi h·∫°n t·ª∑ l·ªá t·ªëi ƒëa (v√≠ d·ª• 70%)
        double redPercent = (double) red / volume;
        double plasmaPercent = (double) plasma / volume;

        if (redPercent > 0.7 || plasmaPercent > 0.7) {
            throw new IllegalArgumentException("T·ªâ l·ªá RBC ho·∫∑c Plasma v∆∞·ª£t qu√° gi·ªõi h·∫°n 70%.");
        }

        // 5. T·∫°o ƒë·ªëi t∆∞·ª£ng g·ª£i √Ω entity
        BloodSeparationSuggestion suggestion = new BloodSeparationSuggestion();
        suggestion.setRedCells(red);
        suggestion.setPlasma(plasma);
        suggestion.setPlatelets(platelets);
        suggestion.setRedCellsCode("PRC-" + bloodGroup);
        suggestion.setPlasmaCode("FFP-" + bloodGroup);
        suggestion.setPlateletsCode("PLT-" + bloodGroup);
        suggestion.setDescription(String.format(
                "Preset: %s - %s - %skg",
                preset.getMethod(),
                preset.getGender(),
                preset.getMinWeight()
        ));

        return suggestion;
    }
}
