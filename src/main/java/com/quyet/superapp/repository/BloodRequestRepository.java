    package com.quyet.superapp.repository;

    import com.quyet.superapp.entity.BloodRequest;
    import com.quyet.superapp.entity.User;
    import com.quyet.superapp.enums.BloodRequestStatus;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.data.jpa.repository.Modifying;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.query.Param;

    import java.time.LocalDateTime;
    import java.util.List;

    public interface BloodRequestRepository extends JpaRepository<BloodRequest, Long> {

        @Query("""
        SELECT br FROM BloodRequest br
        WHERE br.status = 'APPROVED'
          AND br.paymentStatus != 'SUCCESS'
          AND br.createdAt <= :expiredTime
    """)
        List<BloodRequest> findUnpaidAndExpiredRequests(@Param("expiredTime") LocalDateTime expiredTime);


        // üîç Truy v·∫•n y√™u c·∫ßu m√°u KH·∫®N c√≤n ho·∫°t ƒë·ªông
        // ‚úÖ Repository:
        @Query("SELECT r FROM BloodRequest r " +
                "WHERE UPPER(r.urgencyLevel) IN ('KH·∫®N C·∫§P', 'C·∫§P C·ª®U') " +
                "AND r.status IN :statuses")
        List<BloodRequest> findUrgentActiveRequests(@Param("statuses") List<BloodRequestStatus> statuses);


        // üîç Truy v·∫•n y√™u c·∫ßu KH·∫®N ƒëang ch·ªù duy·ªát
        @Query("SELECT r FROM BloodRequest r WHERE UPPER(r.urgencyLevel) IN ('KH·∫®N C·∫§P', 'C·∫§P C·ª®U') AND r.status = 'PENDING'")
        List<BloodRequest> findUrgentPendingRequests();

        // üîç L·ªãch s·ª≠ t·∫•t c·∫£ y√™u c·∫ßu KH·∫®N
        @Query("SELECT r FROM BloodRequest r WHERE UPPER(r.urgencyLevel) IN ('KH·∫®N C·∫§P', 'C·∫§P C·ª®U')")
        List<BloodRequest> findUrgentRequestHistory();

        // ‚úÖ Ki·ªÉm tra tr√πng m√£ b·ªánh √°n
        boolean existsByPatientRecordCode(String patientRecordCode);

        // ‚úÖ Ki·ªÉm tra b√°c sƒ© c√≥ ƒëang ph·ª• tr√°ch ƒë∆°n n√†o kh√¥ng
        boolean existsByDoctorAndStatusIn(User doctor, List<String> statuses);

        // üìä Th·ªëng k√™ s·ªë ƒë∆°n trong kho·∫£ng th·ªùi gian
        long countByCreatedAtBetween(LocalDateTime start, LocalDateTime end);

        // üîç ƒê∆°n ch∆∞a thanh to√°n qu√° th·ªùi gian
        @Query("SELECT r FROM BloodRequest r WHERE r.paymentStatus = 'UNPAID' AND r.approvedAt < :cutoff")
        List<BloodRequest> findOverdueUnpaidRequests(@Param("cutoff") LocalDateTime cutoff);

        // ‚úÖ Truy v·∫•n theo tr·∫°ng th√°i
        List<BloodRequest> findByStatusIn(List<String> statuses);

        // üßæ L·∫•y danh s√°ch ƒë∆°n ƒë√£ thanh to√°n
        @Query("SELECT r FROM BloodRequest r WHERE r.paymentStatus = 'PAID'")
        List<BloodRequest> findAllPaidRequests();

        // üßæ L·∫•y danh s√°ch ƒë∆°n ƒë∆∞·ª£c ho√£n thanh to√°n
        @Query("SELECT r FROM BloodRequest r WHERE r.paymentStatus = 'DEFERRED'")
        List<BloodRequest> findAllDeferredPayments();

        // ‚ùå H·ªßy ƒë∆°n qu√° h·∫°n ch∆∞a thanh to√°n
        @Modifying
        @Query("UPDATE BloodRequest r SET r.status = 'CANCELLED', r.cancelReason = :reason " +
                "WHERE r.paymentStatus = 'UNPAID' AND r.approvedAt < :cutoff")
        int cancelOverdueUnpaidRequests(@Param("cutoff") LocalDateTime cutoff, @Param("reason") String reason);
    }
